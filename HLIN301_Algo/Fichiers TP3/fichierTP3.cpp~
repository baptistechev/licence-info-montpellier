#include <iostream>
#include <fstream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "progListeSC.h"
#include "fichierTP3.h"
using namespace std;



bool estTrieeLSC(ListeSC L){
  //   Res : Renvoie true si L est une ListeSC triée, false sinon 
  if (estVideLSC(L) || estVideLSC(L->succ))
    return true;
  else
    return (L->info < (L->succ)->info) &&  estTrieeLSC(L->succ);
}

bool estListeIntervalle(ListeSC L){
  //   Res : renvoie true si L est une Liste intervalle, renvoie false sinon 
  // A COMPLETER
  return false;
}

ListeSC consListeIntervalle1(int l, int p){
  //     Donnée : l entier positif
  //     Res : renvoie une liste intervalle de longueur l et dont le premier élément a pour valeur p 
  //     Complexité : ???  
  assert(l>=0);
  
  int i; ListeSC L;
  L=NULL;
  for(i=0;i<l;i++)    
    insererFinLSC(L,p+i);
  return L;
}

ListeSC consListeIntervalle2(int l, int p){
  //     Donnée : l entier positif
  //     Res : renvoie une liste intervalle de longueur l et dont le premier élément a pour valeur p 
  //     Complexité : ???  
  // 

  // A COMPLETER
  assert(l>=0);
  return NULL;
}

ListeSC consListeIntervalle3(int l, int p){
  //     Donnée : l entier positif
  //     Res : renvoie une liste intervalle de longueur l et dont le premier élément a pour valeur p 
  //     Complexité : ???  
  //     Version récursive
  // A COMPLETER
  assert(l>=0);
  return NULL;
}

// Temps de construction d'une liste intervalle de taille 50000 :
// avec consListeIntervalle1 : ??? 
// avec consListeIntervalle2 : ???
// avec consListeIntervalle3 : ???

void transfListeIntervalle(ListeSC L){
  //     Donnée : L est une liste triée non vide  
  //     Res : modifie L en y inserant des éléments de sorte qu'elle soit une Liste Intervalle
  //     Complexité : ???? 
  assert((L!=NULL));
  assert(estTrieeLSC(L));
  // A COMPLETER
   
  return;
}

ListeSC intersectionListesIntervalles(ListeSC l1, ListeSC l2){
  //     Donnée : l1 et l2 2 listes intervalles
  //     Res : Renvoie l'intersection de l1 et l2; les éléments de la liste résultat sont recopiés
  //     Complexité : ????
  assert(estListeIntervalle(l1));
  assert(estListeIntervalle(l2));
  // A COMPLETER
  return NULL;
}
  
void plusLgSsLiInterv(ListeSC &L){
  //     Donnée : L liste
  //     Res : L est modifiee, elle est la plus longue sous-liste intervalle de la liste en entrée
  //     Complexité : ????
  // A COMPLETER

}





